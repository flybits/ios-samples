#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef FLYBITSCONTEXTSDK_SWIFT_H
#define FLYBITSCONTEXTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import FlybitsSDK;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlybitsContextSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@protocol ContextDelegate;

/// Protocol that defines the boilerplate for context plugin
SWIFT_PROTOCOL("_TtP17FlybitsContextSDK13ContextPlugin_")
@protocol ContextPlugin <NSObject>
/// The identifier of the plugin
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginId;
/// The bundle name of the plugin
@property (nonatomic, readonly, copy) NSString * _Nonnull bundleName;
/// A list of keys in Info.plist
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable keyInfoPlist;
/// Delegate used to log that data has been generated and sent to Flybits
@property (nonatomic, strong) id <ContextDelegate> _Nullable delegate;
/// A boolen value determining if the plugin is running
@property (nonatomic, readonly) BOOL isRunning;
/// This function is called to initialize the object from class.
- (nonnull instancetype)init;
/// This function is called to trigger the start of the plugin.
///
/// returns:
/// <code>true</code> when the start happened as intended. Otherwise <code>false</code> when the start failed to happen as intended.
- (BOOL)startWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
/// This function is called to trigger the stop the plugin.
///
/// returns:
/// <code>true</code> when the stop happened as intended. Otherwise <code>false</code> when the stop failed to happen as intended.
- (BOOL)stop SWIFT_WARN_UNUSED_RESULT;
/// This function goes over all registered plugins and triggers the refreshData logic on each one of them
- (UIBackgroundFetchResult)refreshData SWIFT_WARN_UNUSED_RESULT;
@end


/// Plugin that gathers battery related information from user devices
SWIFT_CLASS("_TtC17FlybitsContextSDK20BatteryContextPlugin")
@interface BatteryContextPlugin : NSObject <ContextPlugin>
/// The identifier of this plugin
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginId;
/// The bundle name where this plugin is located
@property (nonatomic, copy) NSString * _Nonnull bundleName;
/// A list of Info.plist keys
@property (nonatomic, copy) NSArray<NSString *> * _Nullable keyInfoPlist;
/// Boolean to determine if the plugin is running or not
@property (nonatomic) BOOL isRunning;
/// Delegate used to log that data has been generated and sent to Flybits
@property (nonatomic, weak) id <ContextDelegate> _Nullable delegate;
/// Start the plugin
/// \param launchOptions A dictionary containing any application launch option keys and value
///
///
/// returns:
/// A boolean value indicating whether the plugin is started and running
- (BOOL)startWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
/// Stops the plugin
///
/// returns:
/// True that the plugin has been stopped
- (BOOL)stop SWIFT_WARN_UNUSED_RESULT;
/// Refreshes the plugin and generates new data and event sent to Flybits
///
/// returns:
/// The <code>UIBackgroundFetchResult</code> enum indicating if there is new data or no data.
- (UIBackgroundFetchResult)refreshData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Plugin that gathers carrier related information from user devices
SWIFT_CLASS("_TtC17FlybitsContextSDK20CarrierContextPlugin")
@interface CarrierContextPlugin : NSObject <ContextPlugin>
/// The identifier of this plugin
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginId;
/// The bundle name where this plugin is located
@property (nonatomic, copy) NSString * _Nonnull bundleName;
/// A list of Info.plist keys
@property (nonatomic, copy) NSArray<NSString *> * _Nullable keyInfoPlist;
/// Delegate used to log that data has been generated and sent to Flybits
@property (nonatomic, weak) id <ContextDelegate> _Nullable delegate;
/// Boolean to determine if the plugin is running or not
@property (nonatomic) BOOL isRunning;
/// Start the plugin
/// \param launchOptions A dictionary containing any application launch option keys and value
///
///
/// returns:
/// True that the plugin has been started
- (BOOL)startWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
/// Stops the plugin
///
/// returns:
/// True that the plugin has been stopped
- (BOOL)stop SWIFT_WARN_UNUSED_RESULT;
/// Refreshes the plugin
///
/// returns:
/// The <code>UIBackgroundFetchResult</code> enum with <code>.noData</code> as the actual data refresh is triggered by a timer.
- (UIBackgroundFetchResult)refreshData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The <code>ContextData</code> class is responsible for being a container class to transmit context to flybits.
/// The values used must follow the defintion of your context plugin found inside Developer Portal
/// <h3>Example</h3>
/// \code
///      let ctx = ContextData("ctx.flybits.battery", ["percentage": 10])
///      ContextManager.sendContextData([ctx]) { error in
///      }
///
/// \endcode\param pluginId Value created and defined inside Control Tower 
///
/// \param values key / value pairing parameters associated with the context plugin 
///
SWIFT_CLASS("_TtC17FlybitsContextSDK11ContextData")
@interface ContextData : NSObject
/// Returns the values associate with the context plugin
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Returns the plugin identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull dataTypeId;
/// The identifier of the plugin
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginId;
/// The values that are associated with the context plugin
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull values;
/// The timestamp of when the data is retrieved, defaults to current time when this class is initialized
@property (nonatomic, readonly) NSInteger timestamp;
/// Initializes the class with supplied plugin identifier and data
/// \param pluginId The plugin identifier that defines the plugin
///
/// \param values A dictionary containing the values defined by the plugin
///
- (nonnull instancetype)initWithPluginId:(NSString * _Nonnull)pluginId values:(NSDictionary<NSString *, id> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate used to generate the logs for context plugins
SWIFT_PROTOCOL("_TtP17FlybitsContextSDK15ContextDelegate_")
@protocol ContextDelegate <NSObject>
/// Generates the log including the plugin and data and any errors
/// \param plugin The context plugin that generates the log
///
/// \param data The data associated with the plugin
///
/// \param completion A completion call back with errors if any
///
- (void)generatedValueBy:(id <ContextPlugin> _Nonnull)plugin context:(NSArray<ContextData *> * _Nonnull)data completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

@class FlybitsRequest;

/// Singleton class that manages all the plugins and generate logs for plugin events
SWIFT_CLASS("_TtC17FlybitsContextSDK14ContextManager")
@interface ContextManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Method that will refresh rule evaluations for the currently connected Flybits user
/// \param allDevices When set to true will evaluate for all devices of the user, otherwise only the device making the call will be evaluated
///
/// \param completion Callback that is called after the request is sent, callback contains an error if the request fails
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)evaluateContextRulesWithAllDevices:(BOOL)allDevices completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Method that will send and update the context data of the currently connected Flybits user. Any context data that is debounced will be stored and sent
/// during a subsequent context upload of the same type.
/// The debouncing is not tied any specific user so if <code>removeDebouncedContextData</code> is not called on disconnect or via the registered ContextScope will lead to sending context not generated by the next user.
/// \param contextData An array of context data that will be sent to Flybits
///
/// \param completion Callback that is called after the request is sent, callback contains an error if the request fails
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)sendContextData:(NSArray<ContextData *> * _Nonnull)contextData completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


@interface ContextManager (SWIFT_EXTENSION(FlybitsContextSDK)) <ContextDelegate>
- (void)generatedValueBy:(id <ContextPlugin> _Nonnull)plugin context:(NSArray<ContextData *> * _Nonnull)data completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


@class FlybitsUser;

/// The <code>ContextScope</code> class is responsible for managing context plugins and react to different states based on the user status.
SWIFT_CLASS("_TtC17FlybitsContextSDK12ContextScope")
@interface ContextScope : NSObject <FlybitsScope>
/// The unique identifier for this class
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Starts all the plugins if the current user is connected and opted in to Flybits.
/// Usually called when the app is launched the first time.
/// \param currentActiveUserIsOptedIn A boolean value that indicates if the current user is connected and opted in to Flybits
///
- (void)onStartWithCurrentActiveUserIsOptedIn:(BOOL)currentActiveUserIsOptedIn authState:(enum ScopeAuthState)authState;
/// Stops all the plugins.
/// Usually called when the app is destroyed or when the views are being removed from the view hierarchy
- (void)onStop;
/// Starts the plugins when the user is connected and opted in
/// \param user An User object that represents the current user
///
- (void)onConnectedWithUser:(FlybitsUser * _Nonnull)user;
/// Stops all plugins when user disconnected from Flybits
- (void)onDisconnected;
/// Starts all plugins when user opted in to Flybits
- (void)onOptIn;
/// Stops all plugins when user opted out from Flybits
- (void)onOptOut;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
