// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios11.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlybitsCoreConcierge
@_exported import FlybitsCoreConcierge
import FlybitsKernelSDK
import FlybitsPushSDK
import FlybitsSDK
import Foundation
import Swift
import UIKit
extension UIColor {
}
@_hasMissingDesignatedInitializers public class ContentDataConvertable : FlybitsCoreConcierge.FlybitsContentDataConvertable {
  public func convertToContentData() -> [FlybitsKernelSDK.ContentData]
  public func templateType() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RelevantContentAPIStrategy : FlybitsCoreConcierge.APIStrategy {
  public typealias Output = FlybitsCoreConcierge.ContentDataConvertable
  public var query: FlybitsKernelSDK.ContentQuery?
  public var contentSource: FlybitsCoreConcierge.CoreConciergeParams?
  public func loadData(completion: @escaping ([FlybitsCoreConcierge.ContentDataConvertable]) -> Swift.Void)
  public init(types: [Swift.String : FlybitsKernelSDK.ContentData.Type])
  @objc deinit
}
public enum ActionTypeIntent : Swift.Equatable {
  case unknown
  case concierge
  case web
  case browser
  case universalLink
  case mail
  case phone
  case app
  case details
  case custom(Swift.String)
  public static func == (a: FlybitsCoreConcierge.ActionTypeIntent, b: FlybitsCoreConcierge.ActionTypeIntent) -> Swift.Bool
}
public struct ActionTypeScheme {
  public let intent: FlybitsCoreConcierge.ActionTypeIntent
  public let data: [Swift.String : Swift.String]
  public init(intent: FlybitsCoreConcierge.ActionTypeIntent, data: [Swift.String : Swift.String])
}
public struct ActionTypeSchemeParser {
  public static func parse(_ urlString: Swift.String) -> FlybitsCoreConcierge.ActionTypeScheme
}
final public class ZonesAPIStrategy : FlybitsCoreConcierge.APIStrategy {
  public typealias Output = FlybitsCoreConcierge.ZonesModules
  final public var query: FlybitsKernelSDK.ContentQuery?
  final public var contentSource: FlybitsCoreConcierge.CoreConciergeParams?
  final public func loadData(completion: @escaping ([FlybitsCoreConcierge.ZonesModules]) -> Swift.Void)
  public init(with labels: [Swift.String] = [])
  @objc deinit
}
public protocol FlybitsContentDataConvertable {
  func convertToContentData() -> [FlybitsKernelSDK.ContentData]
  func templateType() -> Swift.String?
}
open class InheritedConciergeViewController<ViewableData, Data, Api> : UIKit.UIViewController where Data : FlybitsCoreConcierge.DataStrategy, Api : FlybitsCoreConcierge.APIStrategy, Data.Input == Api.Output {
  public var viewables: [Swift.String : FlybitsCoreConcierge.AnyViewable<ViewableData>]
  final public let viewModel: FlybitsCoreConcierge.ConciergeViewModel<Data.Position, Data, Api>
  public init(viewModel: FlybitsCoreConcierge.ConciergeViewModel<Data.Position, Data, Api>)
  @available(*, unavailable)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
public class Module : Swift.Decodable {
  final public let identifier: Swift.String
  final public let name: Swift.String
  final public let data: [FlybitsKernelSDK.Content]
  final public let styleCSSURL: Swift.String
  final public let styleCSS: Swift.String
  final public let layout: Swift.String
  final public let layoutHTML: Swift.String
  final public let query: Swift.String
  final public let viewAll: Swift.String
  final public let options: [Swift.String]
  public init(identifier: Swift.String, name: Swift.String, styleCSSURL: Swift.String = "", styleCSS: Swift.String = "", layout: Swift.String = "", layoutHTML: Swift.String, query: Swift.String, viewAll: Swift.String = "", options: [Swift.String] = [], data: [FlybitsKernelSDK.Content])
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public protocol ContextualViewController {
  var context: FlybitsCoreConcierge.ConciergeContext { get }
}
@_hasMissingDesignatedInitializers public class PushContentAPIStrategy : FlybitsCoreConcierge.APIStrategy {
  public typealias Output = FlybitsCoreConcierge.ContentDataConvertable
  public var query: FlybitsKernelSDK.ContentQuery?
  public var pushQuery: FlybitsPushSDK.PushQuery?
  public var contentSource: FlybitsCoreConcierge.CoreConciergeParams?
  public func loadData(completion: @escaping ([FlybitsCoreConcierge.ContentDataConvertable]) -> Swift.Void)
  public init(types: [Swift.String : FlybitsKernelSDK.ContentData.Type]? = nil, pushQuery: FlybitsPushSDK.PushQuery? = nil)
  @objc deinit
}
extension UIConfiguration {
  public var isValid: Swift.Bool {
    get
  }
}
public struct TemplatedOutput<Value> {
  public let value: Value
  public let templateName: Swift.String?
  public init(value: Value, templateName: Swift.String?)
}
public protocol DataStrategy {
  associatedtype Input
  associatedtype Output
  associatedtype Position
  var templates: [FlybitsCoreConcierge.TemplatedOutput<Self.Output>] { get }
  func setData(_ data: [FlybitsCoreConcierge.TemplatedOutput<Self.Output>])
  func addData(_ newData: [FlybitsCoreConcierge.TemplatedOutput<Self.Output>])
  func toTemplatedOutput(_ input: [Self.Input]) -> [FlybitsCoreConcierge.TemplatedOutput<Self.Output>]
  func value(for position: Self.Position) -> FlybitsCoreConcierge.TemplatedOutput<Self.Output>
  func total() -> Swift.Int
  func clean()
}
public struct AnyViewable<Data> : FlybitsCoreConcierge.ConciergeViewable, Swift.Hashable {
  public init<Viewable>(viewable: Viewable) where Data == Viewable.Data, Viewable : FlybitsCoreConcierge.ConciergeViewable
  public func type() -> Data.Type
  public func tileViewController(for contentData: Data) -> UIKit.UIViewController?
  public func tileViewController(for contentData: Data, with context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  public func detailViewController(for contentData: Data) -> UIKit.UIViewController?
  public func detailViewController(for contentData: Data, with context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  public func secondaryCallToAction(for contentData: Data, index: Swift.Int) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  public func primaryCallToAction(for contentData: Data) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  public func primaryCallToAction(for contentData: Data, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  public func secondaryCallToAction(for contentData: Data, index: Swift.Int, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  public var tileViewControllerLayout: Foundation.URL? {
    get
  }
  public static func == (lhs: FlybitsCoreConcierge.AnyViewable<Data>, rhs: FlybitsCoreConcierge.AnyViewable<Data>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CoreConciergeParams {
}
public class ConciergeViewModel<Position, Data, API> : ObjectiveC.NSObject where Position == Data.Position, Data : FlybitsCoreConcierge.DataStrategy, API : FlybitsCoreConcierge.APIStrategy, Data.Input == API.Output {
  final public let viewModelData: Data
  final public let viewModelAPI: API
  @objc dynamic public var fetchingContent: Swift.Bool {
    get
  }
  public init(data: Data, api: API)
  public func fetchData()
  public func cleanData()
  @objc override dynamic public init()
  @objc deinit
}
public struct CoreConcierge {
  @discardableResult
  public static func getZonesAndModules(with query: [Swift.String] = [], completion: @escaping (Swift.Result<FlybitsCoreConcierge.ZonesModules, Swift.Error>) -> Swift.Void) -> FlybitsSDK.FlybitsRequest
  @discardableResult
  public static func getZonesAndModulesMetadata(completion: @escaping (Swift.Result<FlybitsCoreConcierge.ZonesModules, Swift.Error>) -> Swift.Void) -> FlybitsSDK.FlybitsRequest
  public static func storeZoneMetaConfiguration(_ zoneMod: FlybitsCoreConcierge.ZonesModules)
  public static func zoneConfiguration(_ zoneReferenceIDs: [Swift.String]) -> [FlybitsCoreConcierge.Zone]?
  public static func removeZoneConfiguration()
}
public class Zone : Swift.Codable {
  final public let identifier: Swift.String
  final public let name: Swift.String
  final public let modules: [FlybitsCoreConcierge.Module]
  final public let labels: [Swift.String]
  final public let height: Swift.Int
  final public let referenceID: Swift.String
  public init(identifier: Swift.String, refId: Swift.String, name: Swift.String, modules: [FlybitsCoreConcierge.Module], labels: [Swift.String], height: Swift.Int)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
final public class ZonesDataStrategy : FlybitsCoreConcierge.DataStrategy {
  public typealias Output = FlybitsCoreConcierge.Zone
  public typealias Input = FlybitsCoreConcierge.ZonesModules
  public typealias Position = Swift.Int
  final public var templates: [FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>] {
    get
  }
  public init()
  final public func setData(_ data: [FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>])
  final public func addData(_ newData: [FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>])
  final public func toTemplatedOutput(_ input: [FlybitsCoreConcierge.ZonesDataStrategy.Input]) -> [FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>]
  final public func value(for position: Swift.Int) -> FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>
  final public func total() -> Swift.Int
  final public func clean()
  @objc deinit
}
public class ListContentDataStrategy<Convertable> : FlybitsCoreConcierge.DataStrategy where Convertable : FlybitsCoreConcierge.FlybitsContentDataConvertable {
  public typealias Output = FlybitsKernelSDK.ContentData
  public typealias Input = Convertable
  public typealias Position = Swift.Int
  public var templates: [FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.ContentData>] {
    get
  }
  public init()
  public func setData(_ data: [FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.ContentData>])
  public func addData(_ newData: [FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.ContentData>])
  public func toTemplatedOutput(_ input: [FlybitsCoreConcierge.ListContentDataStrategy<Convertable>.Input]) -> [FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.ContentData>]
  public func value(for position: Swift.Int) -> FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.ContentData>
  public func total() -> Swift.Int
  public func clean()
  @objc deinit
}
public class ContentDataStrategy : FlybitsCoreConcierge.DataStrategy {
  public typealias Output = FlybitsKernelSDK.Content
  public typealias Input = FlybitsKernelSDK.Content
  public typealias Position = Swift.Int
  public var templates: [FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.Content>] {
    get
  }
  public init()
  public func setData(_ data: [FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.Content>])
  public func addData(_ newData: [FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.Content>])
  public func toTemplatedOutput(_ input: [FlybitsCoreConcierge.ContentDataStrategy.Input]) -> [FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.Content>]
  public func value(for position: Swift.Int) -> FlybitsCoreConcierge.TemplatedOutput<FlybitsKernelSDK.Content>
  public func total() -> Swift.Int
  public func clean()
  @objc deinit
}
public class ConciergeContext {
  final public let style: FlybitsCoreConcierge.ConciergeStyle
  public init(_ style: FlybitsCoreConcierge.ConciergeStyle)
  @objc deinit
}
final public class ZonesModules : Swift.Decodable {
  final public let zones: [FlybitsCoreConcierge.Zone]
  required public init(from decoder: Swift.Decoder) throws
  public init(with zones: [FlybitsCoreConcierge.Zone])
  @objc deinit
}
public protocol APIStrategy {
  associatedtype Output
  var query: FlybitsKernelSDK.ContentQuery? { get set }
  var contentSource: FlybitsCoreConcierge.CoreConciergeParams? { get set }
  func loadData(completion: @escaping ([Self.Output]) -> Swift.Void)
}
public protocol ConciergeStyle {
  var navigationBarFeedBackgroundColor: UIKit.UIColor { get }
  var navigationBarFeedTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var navigationBarFeedNavigationBarIconColor: UIKit.UIColor { get }
  var contentCategoryFilterCategoryBackgroundColor: UIKit.UIColor { get }
  var contentCategoryFilterHorizontalSpaceBetweenCategoryLabels: CoreGraphics.CGFloat { get }
  var contentCategoryFilterSeparatorBetweenSettingsAndCategory: FlybitsCoreConcierge.ConciergeAppearance.Separator { get }
  var contentCategoryFilterCategorySelectedTextFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var contentCategoryFilterCategoryUnselectedTextFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var contentCategoryCategorySelected: FlybitsCoreConcierge.ConciergeAppearance.CategorySelectionConfig { get }
  var contentCategoryCategoryUnselected: FlybitsCoreConcierge.ConciergeAppearance.CategorySelectionConfig { get }
  var dynamicContentFeedBackgroundColor: UIKit.UIColor { get }
  var dynamicContentFeedVerticalSpaceBetweenCards: CoreGraphics.CGFloat { get }
  var dynamicContentFeedErrorEmptyStatePrimaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig { get }
  var dynamicContentFeedLoadingSpinnerContentFeedColor: UIKit.UIColor { get }
  var dynamicContentFeedLoadingSpinnerPullToRefreshColor: UIKit.UIColor { get }
  var dynamicContentFeedEmptyStateImageColor: UIKit.UIColor { get }
  var dynamicContentFeedErrorStateImageColor: UIKit.UIColor { get }
  var dynamicContentFeedErrorEmptyLoadingStateMessageTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var dynamicContentFeedErrorEmptyLoadingStateMessageDescriptionFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var contentCardBackgroundColor: UIKit.UIColor { get }
  var contentCardMarginSide: CoreGraphics.CGFloat { get }
  var contentCardBorderColor: UIKit.UIColor { get }
  var contentCardBorderWidth: CoreGraphics.CGFloat { get }
  var contentCardBorderRadius: CoreGraphics.CGFloat { get }
  var contentCardShadow: FlybitsCoreConcierge.ConciergeAppearance.ShadowConfig { get }
  var contentCardImageViewPadding: FlybitsCoreConcierge.ConciergeAppearance.Padding { get }
  var contentCardHeaderPadding: FlybitsCoreConcierge.ConciergeAppearance.Padding { get }
  var contentCardTitlePadding: FlybitsCoreConcierge.ConciergeAppearance.Padding { get }
  var contentCardDescriptionPadding: FlybitsCoreConcierge.ConciergeAppearance.Padding { get }
  var contentCardHeaderFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var contentCardTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var contentCardDescriptionFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var contentCardLink: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var contentCardLinkPadding: FlybitsCoreConcierge.ConciergeAppearance.Padding { get }
  var contentCardButtonStackPadding: FlybitsCoreConcierge.ConciergeAppearance.Padding { get }
  var contentCardPrimaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig { get }
  var contentCardSecondaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig { get }
  var contentCardTruncationLinkColor: UIKit.UIColor { get }
  var contentCardContainerPadding: FlybitsCoreConcierge.ConciergeAppearance.Padding { get }
  var detailedViewBackgroundColor: UIKit.UIColor { get }
  var detailedViewTextBlockSidePadding: CoreGraphics.CGFloat { get }
  var detailedViewHeaderFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var detailedViewTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var detailedViewDescriptionFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var detailedViewBodyFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var detailedViewNavigationBar: FlybitsCoreConcierge.ConciergeAppearance.ScreenNavigationBar { get }
  var detailedViewCTAContainerBackgroundColor: UIKit.UIColor { get }
  var inAppWebViewPreferredBarTintColor: UIKit.UIColor { get }
  var inAppWebViewPreferredControlTintColor: UIKit.UIColor { get }
  var notificationsCentreBackgroundColor: UIKit.UIColor { get }
  var notificationsCentreNavigationBar: FlybitsCoreConcierge.ConciergeAppearance.ScreenNavigationBar { get }
  var settingsBackgroundColor: UIKit.UIColor { get }
  var settingsSettingsMenuGroupLabelFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var settingsSettingsMenuItemFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var settingsMenuBackgroundColor: UIKit.UIColor { get }
  var settingsNavigationBar: FlybitsCoreConcierge.ConciergeAppearance.ScreenNavigationBar { get }
  var guidedOptInNavigationBackgroundColor: UIKit.UIColor { get }
  var guidedOptInNavigationTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var guidedOptInNavigationLinkFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var guidedOptInBackgroundColor: UIKit.UIColor { get }
  var guidedOptInLoadingSpinnerColor: UIKit.UIColor { get }
  var guidedOptInConciergeBenefits: FlybitsCoreConcierge.ConciergeAppearance.GuidedOptIn.ConciergeBenefits { get }
  var guidedOptInNotificationBenefits: FlybitsCoreConcierge.ConciergeAppearance.GuidedOptIn.NotificationBenefits { get }
  var guidedOptInLocationServiceBenefits: FlybitsCoreConcierge.ConciergeAppearance.GuidedOptIn.LocationServiceBenefits { get }
  var guidedOptOut: FlybitsCoreConcierge.ConciergeAppearance.GuidedOptIn.OptOut { get }
  var horizontalLayout: FlybitsCoreConcierge.ConciergeAppearance.HorizontalLayout { get }
  var bannerPaginationActiveColor: UIKit.UIColor { get }
  var bannerPaginationInActiveColor: UIKit.UIColor { get }
  var contentBanner: FlybitsCoreConcierge.ConciergeAppearance.Banners.ContentBanner { get }
  var exposeContainerBackgroundColor: UIKit.UIColor { get }
  var exposeSectionTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
  var exposeCallToActionTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font { get }
}
extension ConciergeAppearance {
  public struct NavigationBar {
  }
  public struct ScreenNavigationBar {
    public let backgroundColor: UIKit.UIColor
    public let titleFont: FlybitsCoreConcierge.ConciergeAppearance.Font
    public let navigationBarIconColor: UIKit.UIColor
  }
  public struct ContentCategoryFilter {
  }
  public struct Separator {
  }
  public struct DynamicContentFeed {
  }
  public struct ContentCards {
  }
  public struct DetailedView {
  }
  public struct NotificationsCentre {
  }
  public struct Settings {
  }
  public struct InAppWebView {
  }
  public struct Banners {
    public let paginationActiveState: UIKit.UIColor
    public let paginationInactiveState: UIKit.UIColor
    public let contentBanner: FlybitsCoreConcierge.ConciergeAppearance.Banners.ContentBanner
    public struct ContentBanner {
      public let backgroundColor: UIKit.UIColor
      public let marginSide: CoreGraphics.CGFloat
      public let borderColor: UIKit.UIColor
      public let borderWidth: CoreGraphics.CGFloat
      public let borderRadius: CoreGraphics.CGFloat
      public let shadow: FlybitsCoreConcierge.ConciergeAppearance.ShadowConfig
      public let contentHeaderFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let contentTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let contentDescriptionFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let link: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let primaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
      public let containerPadding: FlybitsCoreConcierge.ConciergeAppearance.Padding
    }
  }
  public struct GuidedOptIn {
    public struct ConciergeBenefits {
      public let optInTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let optInBodyFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let paginationActiveState: UIKit.UIColor
      public let paginationInactiveState: UIKit.UIColor
      public let primaryButtonEnabledState: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
      public let primaryButtonDisabledState: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
      public let optInCheckboxSelectedStateBackgroundColor: UIKit.UIColor
      public let optInCheckboxUnselectedStateBackgroundColor: UIKit.UIColor
      public let optInDisclaimerFont: FlybitsCoreConcierge.ConciergeAppearance.Font
    }
    public struct NotificationBenefits {
      public let optInTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let optInBodyFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let primaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
      public let secondaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
    }
    public struct LocationServiceBenefits {
      public let optInTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let optInBodyFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let primaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
      public let secondaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
    }
    public struct OptOut {
      public let optOutTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let optOutBodyFont: FlybitsCoreConcierge.ConciergeAppearance.Font
      public let primaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
      public let secondaryButton: FlybitsCoreConcierge.ConciergeAppearance.ButtonConfig
    }
    public let navigationBackgroundColor: UIKit.UIColor
    public let navigationTitleFont: FlybitsCoreConcierge.ConciergeAppearance.Font
    public let navigationLinkFont: FlybitsCoreConcierge.ConciergeAppearance.Font
    public let backgroundColor: UIKit.UIColor
    public let loadingSpinnerOptInColor: UIKit.UIColor
    public let conciergeBenefits: FlybitsCoreConcierge.ConciergeAppearance.GuidedOptIn.ConciergeBenefits
    public let notificationBenefits: FlybitsCoreConcierge.ConciergeAppearance.GuidedOptIn.NotificationBenefits
    public let locationServiceBenefits: FlybitsCoreConcierge.ConciergeAppearance.GuidedOptIn.LocationServiceBenefits
    public let optOut: FlybitsCoreConcierge.ConciergeAppearance.GuidedOptIn.OptOut
  }
  public struct Expose {
    public struct Container {
    }
  }
}
extension ConciergeAppearance {
  public struct Padding {
    public let top: CoreGraphics.CGFloat
    public let left: CoreGraphics.CGFloat
    public let bottom: CoreGraphics.CGFloat
    public let right: CoreGraphics.CGFloat
    public init(top: CoreGraphics.CGFloat, left: CoreGraphics.CGFloat, bottom: CoreGraphics.CGFloat, right: CoreGraphics.CGFloat)
  }
  public struct Font {
    public let font: UIKit.UIFont
    public let color: UIKit.UIColor
    public let lineSpacing: CoreGraphics.CGFloat
  }
  public struct ShadowConfig {
    public let color: UIKit.UIColor
    public let offset: CoreGraphics.CGSize
    public let opacity: CoreGraphics.CGFloat
    public let radius: CoreGraphics.CGFloat
  }
  public struct ButtonConfig {
    public let buttonTextFont: FlybitsCoreConcierge.ConciergeAppearance.Font
    public let buttonBackgroundColor: UIKit.UIColor
    public let buttonBorderColor: UIKit.UIColor
    public let buttonBorderRadius: CoreGraphics.CGFloat
    public let buttonBorderWidth: CoreGraphics.CGFloat
    public let buttonBorderShadow: FlybitsCoreConcierge.ConciergeAppearance.ShadowConfig
    public let buttonContentPadding: FlybitsCoreConcierge.ConciergeAppearance.Padding
  }
  public struct CategorySelectionConfig {
    public let backgroundColor: UIKit.UIColor
    public let borderColor: UIKit.UIColor
    public let borderRadius: CoreGraphics.CGFloat
    public let borderWidth: CoreGraphics.CGFloat
  }
  public struct HorizontalLayout {
    public let containerHeight: CoreGraphics.CGFloat
    public let contentCardHeight: CoreGraphics.CGFloat
  }
}
@_hasMissingDesignatedInitializers public class ConciergeAppearance {
  public static func generateConciegeStyle(from fileName: Swift.String? = nil, bundle: Foundation.Bundle = Bundle.main) -> FlybitsCoreConcierge.ConciergeStyle
  public static func generateConciegeStyle(from data: Foundation.Data?, fallbackBundle: Foundation.Bundle = Bundle.main) -> FlybitsCoreConcierge.ConciergeStyle
  @objc deinit
}
public enum ConciergeTransition : Swift.Int {
  case unknown
  case none
  case showFeed
  case showDetail
  case showNotifications
  case showNotificationAndDetail
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ConciergeCallToActionResult {
  case show(UIKit.UIViewController)
  case dismiss
  case doNothing
}
public protocol ConciergeViewable {
  associatedtype Data
  func type() -> Self.Data.Type
  @available(*, deprecated, message: "Please implement the `tileViewController(for contentData: Data, context: ConciergeContext)` function instead")
  func tileViewController(for contentData: Self.Data) -> UIKit.UIViewController?
  func tileViewController(for contentData: Self.Data, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  @available(*, deprecated, message: "Please implement the `detailViewController(for contentData: Data, context: ConciergeContext)` function instead")
  func detailViewController(for contentData: Self.Data) -> UIKit.UIViewController?
  func detailViewController(for contentData: Self.Data, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  var deepLinkTransition: FlybitsCoreConcierge.ConciergeTransition { get }
  @available(*, deprecated, message: "Please implement the `primaryCallToAction(for contentData: Data, context: ConciergeContext)` function instead")
  func primaryCallToAction(for contentData: Self.Data) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  func primaryCallToAction(for contentData: Self.Data, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  @available(*, deprecated, message: "Please implement the `secondaryCallToAction(for contentData: Data, index: Int, context: ConciergeContext)` function instead")
  func secondaryCallToAction(for contentData: Self.Data, index: Swift.Int) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  func secondaryCallToAction(for contentData: Self.Data, index: Swift.Int, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  var tileViewControllerLayout: Foundation.URL? { get }
}
extension ConciergeViewable {
  public var deepLinkTransition: FlybitsCoreConcierge.ConciergeTransition {
    get
  }
  public func primaryCallToAction(for contentData: Self.Data) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  public func secondaryCallToAction(for contentData: Self.Data, index: Swift.Int) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  public var tileViewControllerLayout: Foundation.URL? {
    get
  }
  public func tileViewController(for contentData: Self.Data, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  public func detailViewController(for contentData: Self.Data, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  public func primaryCallToAction(for contentData: Self.Data, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  public func secondaryCallToAction(for contentData: Self.Data, index: Swift.Int, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
}
public class SingleContentAPIStrategy : FlybitsCoreConcierge.APIStrategy {
  public typealias Output = FlybitsKernelSDK.Content
  public var query: FlybitsKernelSDK.ContentQuery?
  public var contentSource: FlybitsCoreConcierge.CoreConciergeParams?
  final public let contentId: Swift.String
  final public let pushRequestId: Swift.String?
  public init(contentId: Swift.String, pushRequestId: Swift.String? = nil, types: [Swift.String : FlybitsKernelSDK.ContentData.Type])
  public func loadData(completion: @escaping ([FlybitsKernelSDK.Content]) -> Swift.Void)
  @objc deinit
}
final public class LocalZonesAPIStrategy : FlybitsCoreConcierge.APIStrategy {
  public typealias Output = FlybitsCoreConcierge.ZonesModules
  final public var query: FlybitsKernelSDK.ContentQuery?
  final public var contentSource: FlybitsCoreConcierge.CoreConciergeParams?
  final public func loadData(completion: @escaping ([FlybitsCoreConcierge.ZonesModules]) -> Swift.Void)
  public init?(_ shouldBeZonesModule: Any)
  public init(with zones: [FlybitsCoreConcierge.Zone])
  @objc deinit
}
extension FlybitsCoreConcierge.ConciergeTransition : Swift.Equatable {}
extension FlybitsCoreConcierge.ConciergeTransition : Swift.Hashable {}
extension FlybitsCoreConcierge.ConciergeTransition : Swift.RawRepresentable {}
