// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlybitsConcierge
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CoreGraphics
import DeveloperToolsSupport
@_exported import FlybitsConcierge
import FlybitsContextSDK
import FlybitsCoreConcierge
import FlybitsKernelSDK
import FlybitsPushSDK
import FlybitsSDK
import Foundation
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum VideoPlayerState {
  case loading
  case ready
  case playing
  case paused
  case destroyed
  case error
  case complete
  public static func == (a: FlybitsConcierge.VideoPlayerState, b: FlybitsConcierge.VideoPlayerState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol VideoPlayer : AnyObject {
  var delegate: (any FlybitsConcierge.PlaybackDelegate)? { get }
  var currentStatus: FlybitsConcierge.VideoPlayerState { get }
  func play(url: Foundation.URL)
  func pause()
  func skip(to: Swift.UInt)
  func destroy()
  func view() -> UIKit.UIView
  func thumbnail()
}
public protocol PlaybackDelegate : AnyObject {
  func stateChanged(player: any FlybitsConcierge.VideoPlayer, from: FlybitsConcierge.VideoPlayerState, to: FlybitsConcierge.VideoPlayerState)
}
open class BenefitCardConciergeViewable : FlybitsCoreConcierge.ConciergeViewable {
  public typealias Data = FlybitsKernelSDK.ContentData
  public init()
  open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  public func tileViewController(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  public func type() -> FlybitsKernelSDK.ContentData.Type
  open func primaryCallToAction(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ButtonsCardContentData : FlybitsKernelSDK.ContentData {
  final public let title: FlybitsSDK.LocalizedObject<Swift.String>
  final public let header: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let buttonsCardDescription: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let imageUrlString: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let links: [FlybitsConcierge.Link]
  final public let detail: FlybitsConcierge.DetailContentData?
  final public let mediaContentData: FlybitsConcierge.MediaContentData?
  final public let cardBackgroundColor: FlybitsConcierge.ColorVariants?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol ConciergeIDPConvertable {
  func toFlybitsIDP() -> any FlybitsSDK.IDP
}
@_inheritsConvenienceInitializers final public class LinkCardContentData : FlybitsKernelSDK.ContentData {
  final public let title: FlybitsSDK.LocalizedObject<Swift.String>
  final public let header: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let linkCardDescription: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let imageUrlString: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let link: FlybitsConcierge.Link?
  final public let detail: FlybitsConcierge.DetailContentData?
  final public let mediaContentData: FlybitsConcierge.MediaContentData?
  final public let cardBackgroundColor: FlybitsConcierge.ColorVariants?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct ConciergePush {
}
open class WebCardConciergeViewable : FlybitsCoreConcierge.ConciergeViewable {
  public typealias Data = FlybitsKernelSDK.ContentData
  public init()
  public func type() -> FlybitsKernelSDK.ContentData.Type
  public func tileViewController(for contentData: FlybitsKernelSDK.ContentData) -> UIKit.UIViewController?
  public func detailViewController(for contentData: FlybitsKernelSDK.ContentData) -> UIKit.UIViewController?
  open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  open func primaryCallToAction(for contentData: FlybitsKernelSDK.ContentData) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  open func secondaryCallToAction(for contentData: FlybitsKernelSDK.ContentData, index: Swift.Int) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  @objc deinit
}
public protocol DeepLinkHandlerProtocol {
  static var identifier: Swift.String { get }
  static func viewController(contentData: FlybitsKernelSDK.ContentData?) -> UIKit.UIViewController?
  static func customPresent(presentingController: UIKit.UIViewController) -> FlybitsCoreConcierge.ConciergeCallToActionResult
}
public protocol ConciergeContentComponent {
  var type: Swift.String { get }
  var id: Swift.String { get }
  var name: Swift.String { get }
}
public struct APIKeyConciergeIDP : FlybitsConcierge.ConciergeIDPConvertable {
  public let apiKey: Swift.String
  public let email: Swift.String
  public init(email: Swift.String, apiKey: Swift.String)
  public func toFlybitsIDP() -> any FlybitsSDK.IDP
}
public struct SignedConciergeIDP : FlybitsConcierge.ConciergeIDPConvertable {
  public let accessToken: Swift.String
  public let signature: Swift.String
  public init(accessToken: Swift.String, signature: Swift.String)
  public func toFlybitsIDP() -> any FlybitsSDK.IDP
}
@_hasMissingDesignatedInitializers public class ErrorPrefetch : FlybitsConcierge.ConciergePrefetch {
  final public let identifier: Swift.String
  public var prefetchResult: FlybitsConcierge.ConciergePrefetchResult? {
    get
  }
  public func fetch(completion: @escaping (FlybitsConcierge.ConciergePrefetchResult) -> Swift.Void)
  public func data() -> Any?
  @objc deinit
}
public class ZoneDataStrategy : FlybitsCoreConcierge.DataStrategy {
  public typealias Output = FlybitsCoreConcierge.Zone
  public typealias Input = FlybitsCoreConcierge.Zone
  public typealias Position = Swift.Int
  public var templates: [FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>] {
    get
  }
  public init()
  public func setData(_ data: [FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>])
  public func addData(_ newData: [FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>])
  public func toTemplatedOutput(_ input: [FlybitsConcierge.ZoneDataStrategy.Input]) -> [FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>]
  public func value(for position: Swift.Int) -> FlybitsCoreConcierge.TemplatedOutput<FlybitsCoreConcierge.Zone>
  public func total() -> Swift.Int
  public func clean()
  @objc deinit
}
public class ConciergeLabelsExpression : Swift.Equatable, Swift.Hashable {
  final public let predicates: [FlybitsConcierge.ConciergeLabelsPredicate]
  final public let booleanOperator: FlybitsConcierge.ConciergeBooleanOperator
  public init(predicates: [FlybitsConcierge.ConciergeLabelsPredicate], booleanOperator: FlybitsConcierge.ConciergeBooleanOperator)
  public func labelsQuery() -> FlybitsKernelSDK.LabelsQuery
  public static func == (lhs: FlybitsConcierge.ConciergeLabelsExpression, rhs: FlybitsConcierge.ConciergeLabelsExpression) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class ConciergeLabelsPredicate : Swift.Equatable, Swift.Hashable {
  final public let conciergeBoolOperator: FlybitsConcierge.ConciergeBooleanOperator
  public var labels: [Swift.String] {
    get
  }
  public init(labels: [Swift.String], booleanOperator: FlybitsConcierge.ConciergeBooleanOperator)
  public func corePredicate() -> FlybitsKernelSDK.LabelsPredicate
  public static func == (lhs: FlybitsConcierge.ConciergeLabelsPredicate, rhs: FlybitsConcierge.ConciergeLabelsPredicate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConciergeBooleanOperator {
  case and
  case or
  case none
  public var coreBooleanOperator: FlybitsKernelSDK.BooleanOperator {
    get
  }
  public static func == (a: FlybitsConcierge.ConciergeBooleanOperator, b: FlybitsConcierge.ConciergeBooleanOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SingleContentPrefetch : FlybitsConcierge.ConciergePrefetch {
  final public let identifier: Swift.String
  public var prefetchResult: FlybitsConcierge.ConciergePrefetchResult? {
    get
  }
  public func fetch(completion: @escaping (FlybitsConcierge.ConciergePrefetchResult) -> Swift.Void)
  public func data() -> Any?
  @objc deinit
}
public struct ConciergeContextData {
  public var pluginId: Swift.String {
    get
  }
  public var values: [Swift.String : Any] {
    get
  }
  public init(pluginId: Swift.String, values: [Swift.String : Any])
}
public protocol ConciergeAutoResizeViewController : UIKit.UIViewController {
  typealias ConciergeViewControllerResized = (_ vc: UIKit.UIViewController, _ newSize: CoreFoundation.CGSize) -> Swift.Void
  var resizedListeners: [Self.ConciergeViewControllerResized] { get }
  func addResizedListeners(listener: @escaping Self.ConciergeViewControllerResized)
}
public struct ZonesConfig : Swift.Hashable {
  public let height: Swift.Double
  public let width: Swift.Double
  public let labels: [Swift.String]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlybitsConcierge.ZonesConfig, b: FlybitsConcierge.ZonesConfig) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class ConciergeSafariViewController : SafariServices.SFSafariViewController, FlybitsCoreConcierge.ContextualViewController {
  @_Concurrency.MainActor(unsafe) public var context: FlybitsCoreConcierge.ConciergeContext
  @_Concurrency.MainActor(unsafe) public init(url: Foundation.URL, context: FlybitsCoreConcierge.ConciergeContext? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func applyShadow(shadow: FlybitsCoreConcierge.ConciergeAppearance.ShadowConfig)
}
extension UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
}
public struct ColorVariants : Swift.Codable {
  public let light: Swift.String?
  public let dark: Swift.String?
  public init(light: Swift.String?, dark: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers open class BenefitBannerConciergeViewable : FlybitsConcierge.BenefitCardConciergeViewable {
  override open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  override public init()
  override public func tileViewController(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  @objc deinit
}
@objc final public class DetailContentData : ObjectiveC.NSObject, Swift.Decodable {
  final public let body: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let links: [FlybitsConcierge.Link]?
  public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum ConciergePushTokenStatus : Swift.Int {
  case deleted, sent, unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Concierge {
  public typealias ConciergeConnect = (_ idp: (any FlybitsConcierge.ConciergeIDPConvertable)?, _ error: (any Swift.Error)?) -> Swift.Void
  public typealias ConciergeOptInStatus = (_ optInStatus: FlybitsConcierge.OptInChoice, _ connected: @escaping FlybitsConcierge.Concierge.ConciergeConnect) -> Swift.Void
  public static func configure(configuration: FlybitsConcierge.FlybitsConciergeConfiguration? = nil, contextPlugins: [FlybitsContextSDK.ContextManager.PluginItem], deepLinkHandlers: [any FlybitsConcierge.DeepLinkHandlerProtocol.Type] = [], customLanguages: [Foundation.Locale]? = nil, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil)
  public static func updateZoneConfigurations(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public static func presentGuidedOptIn(on viewController: UIKit.UIViewController, using conciergeTheme: FlybitsConcierge.ConciergeTheme? = nil)
  public static func presentGuidedOptOut(on viewController: UIKit.UIViewController, using conciergeTheme: FlybitsConcierge.ConciergeTheme? = nil)
  public static func optIn(completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  public static func optOut(completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  public static func connect(with idp: any FlybitsConcierge.ConciergeIDPConvertable, customerId: Swift.String? = nil, physicalDeviceId: Swift.String? = nil, fetchConfiguration: Swift.Bool = true, completion: @escaping (_ error: Foundation.NSError?) -> Swift.Void)
  public static func disconnect(completion: @escaping (_ error: Foundation.NSError?) -> Swift.Void)
  public static var isConnected: Swift.Bool {
    get
  }
  public static func delegate(from delegate: any FlybitsConcierge.ConciergeEventsDelegate) -> FlybitsConcierge.AnyConciergeEventsDelegate<any FlybitsConcierge.ConciergeEventsDelegate>
  public static func guidedOptInViewController(optInInfo: FlybitsConcierge.ConciergeOptInInfo, conciergeType: FlybitsConcierge.Container, params: [FlybitsConcierge.ConciergeParams], options: [FlybitsConcierge.ConciergeOptions]) -> UIKit.UIViewController
  public static func guidedOptInViewController(with delegate: (any FlybitsConcierge.GuidedOptInDelegate)? = nil) -> UIKit.UIViewController
  public static func viewController(_ conciergeType: FlybitsConcierge.Container, params: [FlybitsConcierge.ConciergeParams], options: [FlybitsConcierge.ConciergeOptions]) -> UIKit.UIViewController
  public static func settingsViewController(with configuration: FlybitsConcierge.FlybitsSettingsConfiguration = FlybitsSettingsConfiguration.Builder().build(), conciergeTheme: FlybitsConcierge.ConciergeTheme? = nil) -> UIKit.UIViewController
  public static func enableLogging(forLevel level: FlybitsConcierge.ConciergeLoggerLevel = .verbose)
  @objc deinit
}
extension FlybitsConcierge.Concierge {
  public static func status(for customerId: Swift.String) -> FlybitsConcierge.ConciergeCustomerStatus
  public static func activeUserStatus() -> FlybitsConcierge.ConciergeCustomerStatus
  public static func activeUser() -> FlybitsConcierge.ConciergeUser?
}
extension FlybitsConcierge.Concierge {
  public static func deepLink(conciergePush: FlybitsConcierge.ConciergePush, conciergeTheme: FlybitsConcierge.ConciergeTheme? = nil) -> UIKit.UIViewController?
  public static func deepLink(conciergePush: FlybitsConcierge.ConciergePush, with options: [FlybitsConcierge.ConciergeOptions] = [], requestEvents delegate: FlybitsConcierge.AnyConciergeEventsDelegate<any FlybitsConcierge.ConciergeEventsDelegate>? = nil) -> UIKit.UIViewController?
  public static func handlePush(_ userInfo: [Swift.AnyHashable : Any]) -> FlybitsConcierge.ConciergePush?
  public static func pushTokenUploadStatus() -> FlybitsConcierge.ConciergePushTokenStatus
  public static func actionableLink(from push: FlybitsConcierge.ConciergePush) -> Foundation.URL
  public static func handleActionableLink(_ link: Foundation.URL, with options: [FlybitsConcierge.ConciergeOptions] = [], requestEvents delegate: FlybitsConcierge.AnyConciergeEventsDelegate<any FlybitsConcierge.ConciergeEventsDelegate>? = nil) -> UIKit.UIViewController?
  public static func sendPush(token: Foundation.Data, with parameters: [Swift.String : Any]? = nil)
  public static func sendPush(token: Swift.String, with parameters: [Swift.String : Any]? = nil)
  public static func deletePushToken(completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  public static func setPushPreferredLanguage(_ locales: [Foundation.Locale], completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  public static func setCustomLanguage(_ locales: [Foundation.Locale], completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  public static func useSystemLanguage(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public static func sendContextData(_ contextData: [FlybitsConcierge.ConciergeContextData])
  public static func zoneConfigurations(for zoneReferenceIDs: [Swift.String]) -> FlybitsConcierge.ZonesConfig
}
extension FlybitsConcierge.Concierge {
  public static func prefetch(_ container: FlybitsConcierge.PrefetchContainer, params: [FlybitsConcierge.ConciergeParams], options: [FlybitsConcierge.ConciergeOptions], identifier: Swift.String) -> FlybitsConcierge.AnyConciergePrefetch<any FlybitsConcierge.ConciergePrefetch>
}
extension FlybitsConcierge.Concierge {
  public static func isOverlay(from url: Foundation.URL) -> Swift.Bool
  public static func showAsOverlay(_ url: Foundation.URL, with options: [FlybitsConcierge.ConciergeOptions], and params: [FlybitsConcierge.ConciergeParams])
}
@_inheritsConvenienceInitializers final public class BenefitCardContentData : FlybitsKernelSDK.ContentData {
  final public var source: Swift.String {
    get
  }
  final public var sourceImage: Swift.String {
    get
  }
  final public var actionButton: FlybitsConcierge.ActionableBenefitCard? {
    get
  }
  final public var backgroundColor: Swift.String? {
    get
  }
  final public var header: Swift.String? {
    get
  }
  final public var explanation: FlybitsSDK.LocalizedObject<Swift.String>? {
    get
  }
  final public var title: FlybitsSDK.LocalizedObject<Swift.String> {
    get
  }
  final public var gradientRange: [UIKit.UIColor]? {
    get
  }
  final public var bannerImage: FlybitsSDK.LocalizedObject<Swift.String>? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
final public class ActionableBenefitCard : Swift.Decodable {
  final public let label: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let color: UIKit.UIColor?
  final public let url: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public class BenefitContent : Swift.Decodable {
  final public let backgroundColor: Swift.String?
  final public let header: Swift.String?
  final public let explanation: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let title: FlybitsSDK.LocalizedObject<Swift.String>
  final public let source: Swift.String?
  final public let sourceImage: Swift.String?
  final public let bannerImage: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let actionButton: FlybitsConcierge.ActionableBenefitCard?
  public var gradientRange: [UIKit.UIColor]?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct JwtLoginConciergeIDP : FlybitsConcierge.ConciergeIDPConvertable {
  public init(jwtLoginToken: Swift.String)
  public func toFlybitsIDP() -> any FlybitsSDK.IDP
}
public struct OAuthConciergeIDP : FlybitsConcierge.ConciergeIDPConvertable {
  public enum ConciergeSupportedOAuthIDP : Swift.Int, Swift.CaseIterable {
    case facebook
    case google
    case okta
    public var providerName: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [FlybitsConcierge.OAuthConciergeIDP.ConciergeSupportedOAuthIDP]
    public typealias RawValue = Swift.Int
    public static var allCases: [FlybitsConcierge.OAuthConciergeIDP.ConciergeSupportedOAuthIDP] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(provider: Swift.String, accessToken: Swift.String, clientID: Swift.String? = nil)
  public init(supportedIDP: FlybitsConcierge.OAuthConciergeIDP.ConciergeSupportedOAuthIDP, accessToken: Swift.String, clientID: Swift.String? = nil)
  public func toFlybitsIDP() -> any FlybitsSDK.IDP
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ConciergeNavigationController : UIKit.UINavigationController, FlybitsCoreConcierge.ContextualViewController {
  @_Concurrency.MainActor(unsafe) @objc final public let identifier: Swift.String
  @_Concurrency.MainActor(unsafe) final public let context: FlybitsCoreConcierge.ConciergeContext
  @_Concurrency.MainActor(unsafe) public init(rootViewController: UIKit.UIViewController, context: FlybitsCoreConcierge.ConciergeContext)
  @_Concurrency.MainActor(unsafe) public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?, context: FlybitsCoreConcierge.ConciergeContext)
  @_Concurrency.MainActor(unsafe) public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?, context: FlybitsCoreConcierge.ConciergeContext)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension FlybitsConcierge.ConciergeNavigationController : UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, willShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
}
extension FlybitsConcierge.ConciergeNavigationController : FlybitsSDK.FlybitsScope {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onStart(currentActiveUserIsOptedIn: Swift.Bool, authState: FlybitsSDK.ScopeAuthState)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onStop()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onConnected(user: FlybitsSDK.FlybitsUser)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onDisconnected()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onOptIn()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onOptOut()
}
@_inheritsConvenienceInitializers open class ButtonBannerConciergeViewable : FlybitsConcierge.ButtonsCardConciergeViewable {
  public typealias Data = FlybitsKernelSDK.ContentData
  override open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  override public init()
  override public func tileViewController(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  @objc deinit
}
@_inheritsConvenienceInitializers open class DiscoverableButtonsCardConciergeViewable : FlybitsConcierge.ButtonsCardConciergeViewable {
  override open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  override public init()
  @objc deinit
}
@objc final public class MediaContentData : ObjectiveC.NSObject, Swift.Decodable {
  public enum MediaContentDataType : Swift.String {
    case image, video
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let mediaProvider: Swift.String?
  final public let mediaType: FlybitsConcierge.MediaContentData.MediaContentDataType
  final public let resourceURL: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let label: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let previewURL: FlybitsSDK.LocalizedObject<Swift.String>?
  public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct AnonymousConciergeIDP : FlybitsConcierge.ConciergeIDPConvertable {
  public init()
  public func toFlybitsIDP() -> any FlybitsSDK.IDP
}
open class ButtonsCardConciergeViewable : FlybitsCoreConcierge.ConciergeViewable {
  public typealias Data = FlybitsKernelSDK.ContentData
  open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  public init()
  public func type() -> FlybitsKernelSDK.ContentData.Type
  public func tileViewController(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  public func detailViewController(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  open func primaryCallToAction(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  open func secondaryCallToAction(for contentData: FlybitsKernelSDK.ContentData, index: Swift.Int, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  @objc deinit
}
@_inheritsConvenienceInitializers open class LinkBannerConciergeViewable : FlybitsConcierge.LinkCardConciergeViewable {
  override open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  override public init()
  override public func tileViewController(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  @objc deinit
}
public struct OpenConciergeIDP : FlybitsConcierge.ConciergeIDPConvertable {
  public init(identifierToken: Swift.String)
  public func toFlybitsIDP() -> any FlybitsSDK.IDP
}
public protocol ConciergeActionDelegate : AnyObject {
  func action(_ url: Foundation.URL)
  func refresh()
}
public enum Container : Swift.String {
  case none
  case categories
  case expose
  case configured
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConciergeParams : Swift.Hashable {
  case labels([Swift.String])
  case labelsExpression(FlybitsConcierge.ConciergeLabelsExpression)
  case zonesFilter(FlybitsConcierge.ZonesConfig)
  case delegate(FlybitsConcierge.AnyConciergeEventsDelegate<any FlybitsConcierge.ConciergeEventsDelegate>)
  case prefetch(FlybitsConcierge.AnyConciergePrefetch<any FlybitsConcierge.ConciergePrefetch>)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlybitsConcierge.ConciergeParams, b: FlybitsConcierge.ConciergeParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum OptInChoice : Swift.Int {
  case yes
  case no
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ContentStyle : Swift.String {
  case card
  case banner
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ConciergeOptInInfo {
  public let customerId: Swift.String
  public let customPhysicalDeviceId: Swift.String?
  public let callback: FlybitsConcierge.Concierge.ConciergeOptInStatus?
  public init(customerId: Swift.String, customPhysicalDeviceId: Swift.String? = nil, callback: FlybitsConcierge.Concierge.ConciergeOptInStatus? = nil)
}
public enum ConciergeOptions : Swift.Hashable {
  case identifier(Swift.String)
  case displayNavigation(title: Swift.String? = nil)
  case settings
  case notifications
  case showNotifications
  case customViewables([Swift.String : FlybitsCoreConcierge.AnyViewable<FlybitsKernelSDK.ContentData>])
  case horizontal
  case style(_: FlybitsConcierge.ContentStyle = .card)
  case exposeTitle(_: Swift.String? = nil)
  case exposeCallToAction(title: Swift.String? = nil, actionUrl: Swift.String? = nil)
  case categoryDefaultTab(title: Swift.String? = nil)
  case customTheme(FlybitsConcierge.ConciergeTheme)
  case customNoContentView(FlybitsConcierge.AnyNoContentViewable<any FlybitsConcierge.NoContentViewable>)
  case customLoadingView(FlybitsConcierge.AnyLoadingViewable<any FlybitsConcierge.LoadingViewable>)
  case overlay(Swift.Bool)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlybitsConcierge.ConciergeOptions, b: FlybitsConcierge.ConciergeOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConciergeTheme : Swift.Hashable {
  case filename(Swift.String)
  case json(Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FlybitsConcierge.ConciergeTheme, b: FlybitsConcierge.ConciergeTheme) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConciergeCustomerStatus : Swift.Int, Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
  case connectedOptedIn
  case connectedOptedOut
  case connectedOptedInExpiredToken
  case connectedOptedOutExpiredToken
  case notConnectedOptedIn
  case notConnectedOptedOut
  case notConnected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ConciergeUser : Swift.Equatable {
  public let identifier: Swift.String
  public let deviceId: Swift.String
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let email: Swift.String
  public let isConfirmed: Swift.Bool
  public let isOptedIn: Swift.Bool
  public static func == (lhs: FlybitsConcierge.ConciergeUser, rhs: FlybitsConcierge.ConciergeUser) -> Swift.Bool
}
public enum ConciergeLoggerLevel {
  case verbose
  case debug
  case info
  case warning
  case error
  case fault
  public static func == (a: FlybitsConcierge.ConciergeLoggerLevel, b: FlybitsConcierge.ConciergeLoggerLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConciergePrefetchResult : Swift.Error {
  public let authStatus: FlybitsConcierge.ConciergeCustomerStatus
  public let hasContent: Swift.Bool
  public let identifier: Swift.String
}
public enum PrefetchContainer {
  case configured
  case pushcontent
  case content(Swift.String)
  case web
  case webWithContent(Swift.String)
  case actionableLink(Foundation.URL)
}
public protocol ConciergePrefetch {
  func fetch(completion: @escaping (FlybitsConcierge.ConciergePrefetchResult) -> Swift.Void)
  var identifier: Swift.String { get }
  var prefetchResult: FlybitsConcierge.ConciergePrefetchResult? { get }
}
@_hasMissingDesignatedInitializers public class AnyConciergePrefetch<PrefetchType> : FlybitsConcierge.ConciergePrefetch, Swift.Hashable {
  public var identifier: Swift.String
  public var prefetchResult: FlybitsConcierge.ConciergePrefetchResult? {
    get
  }
  public static func == (lhs: FlybitsConcierge.AnyConciergePrefetch<PrefetchType>, rhs: FlybitsConcierge.AnyConciergePrefetch<PrefetchType>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func fetch(completion: @escaping (FlybitsConcierge.ConciergePrefetchResult) -> Swift.Void)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ConciergeEventsDelegate : AnyObject {
  func event(_ actionlink: Foundation.URL, identifier: Swift.String)
  func authentication(conciergeStatus: FlybitsConcierge.ConciergeCustomerStatus, identifier: Swift.String)
  func analyticsEvent(_ exportedAnalyticsEvent: FlybitsConcierge.ExportedAnalyticsEvent, identifier: Swift.String)
  func conciergeWillDisplayContent(_ hasContent: Swift.Bool, identifier: Swift.String)
}
extension FlybitsConcierge.ConciergeEventsDelegate {
  public func authentication(conciergeStatus: FlybitsConcierge.ConciergeCustomerStatus, identifier: Swift.String)
  public func analyticsEvent(_ exportedAnalyticsEvent: FlybitsConcierge.ExportedAnalyticsEvent, identifier: Swift.String)
  public func conciergeWillDisplayContent(_ hasContent: Swift.Bool, identifier: Swift.String)
}
public struct ExportedAnalyticsEvent {
  public let type: Swift.String
  public let contentInfo: [Swift.String : Swift.String?]
  public let contentData: [Swift.String : Any?]?
}
@_hasMissingDesignatedInitializers public class AnyConciergeEventsDelegate<ConciergeEventType> : FlybitsConcierge.ConciergeEventsDelegate, Swift.Hashable {
  public func event(_ actionlink: Foundation.URL, identifier: Swift.String)
  public func authentication(conciergeStatus: FlybitsConcierge.ConciergeCustomerStatus, identifier: Swift.String)
  public func analyticsEvent(_ exportedAnalyticsEvent: FlybitsConcierge.ExportedAnalyticsEvent, identifier: Swift.String)
  public func conciergeWillDisplayContent(_ hasContent: Swift.Bool, identifier: Swift.String)
  public static func == (lhs: FlybitsConcierge.AnyConciergeEventsDelegate<ConciergeEventType>, rhs: FlybitsConcierge.AnyConciergeEventsDelegate<ConciergeEventType>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NoContentViewable {
  func view(_ conciergeCustomerStatus: FlybitsConcierge.ConciergeCustomerStatus, _ actionDelegate: any FlybitsConcierge.ConciergeActionDelegate) -> UIKit.UIViewController
}
public struct AnyNoContentViewable<ViewableType> : FlybitsConcierge.NoContentViewable, Swift.Hashable {
  public static func == (lhs: FlybitsConcierge.AnyNoContentViewable<ViewableType>, rhs: FlybitsConcierge.AnyNoContentViewable<ViewableType>) -> Swift.Bool
  public func view(_ conciergeCustomerStatus: FlybitsConcierge.ConciergeCustomerStatus, _ actionDelegate: any FlybitsConcierge.ConciergeActionDelegate) -> UIKit.UIViewController
  public init<ViewableType>(_ viewable: ViewableType) where ViewableType : FlybitsConcierge.NoContentViewable
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LoadingViewable {
  func view() -> UIKit.UIViewController
}
public struct AnyLoadingViewable<ViewableType> : FlybitsConcierge.LoadingViewable, Swift.Hashable {
  public static func == (lhs: FlybitsConcierge.AnyLoadingViewable<ViewableType>, rhs: FlybitsConcierge.AnyLoadingViewable<ViewableType>) -> Swift.Bool
  public func view() -> UIKit.UIViewController
  public init<ViewableType>(_ viewable: ViewableType) where ViewableType : FlybitsConcierge.LoadingViewable
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol GuidedOptInDelegate : AnyObject {
  func flowCompleted(isOptedIn: Swift.Bool)
}
open class LinkCardConciergeViewable : FlybitsCoreConcierge.ConciergeViewable {
  public typealias Data = FlybitsKernelSDK.ContentData
  open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  public init()
  public func type() -> FlybitsKernelSDK.ContentData.Type
  public func tileViewController(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  public func detailViewController(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> UIKit.UIViewController?
  open func primaryCallToAction(for contentData: FlybitsKernelSDK.ContentData, context: FlybitsCoreConcierge.ConciergeContext) -> FlybitsCoreConcierge.ConciergeCallToActionResult
  @objc deinit
}
@_inheritsConvenienceInitializers open class DiscoverableBenefitCardConciergeViewable : FlybitsConcierge.BenefitCardConciergeViewable {
  override open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  override public init()
  @objc deinit
}
public func safariViewController(for url: Foundation.URL, withPresentationStyle presentationStyle: UIKit.UIModalPresentationStyle? = .fullScreen, context: FlybitsCoreConcierge.ConciergeContext? = nil) -> FlybitsConcierge.ConciergeSafariViewController?
public func performOnMainThread(sync: Swift.Bool = false, closure: @escaping () -> Swift.Void)
public struct JwtConciergeIDP : FlybitsConcierge.ConciergeIDPConvertable {
  public init(token: Swift.String)
  public func toFlybitsIDP() -> any FlybitsSDK.IDP
}
public enum ActionType : Swift.String, Swift.Decodable, Swift.CaseIterable {
  case details
  case link
  case app
  case content
  case universalAction
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FlybitsConcierge.ActionType]
  public typealias RawValue = Swift.String
  public static var allCases: [FlybitsConcierge.ActionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct Link : Swift.Decodable {
  public let actionType: FlybitsConcierge.ActionType
  public let actionValue: FlybitsSDK.LocalizedObject<Swift.String>
  public let text: FlybitsSDK.LocalizedObject<Swift.String>
  public init(from decoder: any Swift.Decoder) throws
}
public class SingleZoneAPIStrategy : FlybitsCoreConcierge.APIStrategy {
  public typealias Output = FlybitsCoreConcierge.Zone
  public var query: FlybitsKernelSDK.ContentQuery?
  public var contentSource: FlybitsCoreConcierge.CoreConciergeParams?
  final public let contentId: Swift.String
  final public let pushRequestId: Swift.String?
  public init(contentId: Swift.String, pushRequestId: Swift.String? = nil, types: [Swift.String : FlybitsKernelSDK.ContentData.Type], with options: [FlybitsConcierge.ConciergeOptions])
  public func loadData(completion: @escaping (Swift.Result<[FlybitsCoreConcierge.Zone], any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct FlybitsSettingsConfiguration {
  public var tncUrl: Swift.String {
    get
  }
  public var privacyUrl: Swift.String {
    get
  }
  public var showOptOut: Swift.Bool {
    get
  }
  public class Builder {
    public init()
    @discardableResult
    public func setTncUrl(_ tncUrl: Swift.String) -> Self
    @discardableResult
    public func setPrivacyUrl(_ privacyUrl: Swift.String) -> Self
    @discardableResult
    public func setShowOptOut(_ showOptOut: Swift.Bool) -> Self
    public func build() -> FlybitsConcierge.FlybitsSettingsConfiguration
    @objc deinit
  }
}
@_inheritsConvenienceInitializers open class DiscoverableLinkCardConciergeViewable : FlybitsConcierge.LinkCardConciergeViewable {
  override open var tileViewControllerLayout: Foundation.URL? {
    get
  }
  override public init()
  @objc deinit
}
public enum ConciergePushNetwork : Swift.String, Swift.Codable {
  case apns
  case fcm
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class FlybitsConciergeConfiguration {
  public var settingsConfiguration: FlybitsConcierge.FlybitsSettingsConfiguration {
    get
  }
  public var flybitsConfiguration: FlybitsSDK.FlybitsConfiguration {
    get
  }
  public var webService: Swift.String {
    get
  }
  public var webViewPoolingSize: Swift.Int {
    get
  }
  public var timeToRefreshInterval: Swift.Double {
    get
  }
  public var timeToRefreshNoDataInterval: Swift.Double {
    get
  }
  public class Builder {
    public init()
    @discardableResult
    public func setSettingsConfiguration(_ settingsConfiguration: FlybitsConcierge.FlybitsSettingsConfiguration) -> Self
    @discardableResult
    public func setProjectId(_ projectId: Swift.String) -> Self
    @discardableResult
    public func setGatewayUrl(_ gatewayUrl: Swift.String) -> Self
    @discardableResult
    public func setAutoRegisterForLocation(_ value: Swift.Bool) -> Self
    @discardableResult
    public func setWebService(_ value: Swift.String) -> Self
    @discardableResult
    public func setPushNetwork(_ value: FlybitsConcierge.ConciergePushNetwork) -> Self
    @discardableResult
    public func setWebviewPoolingSize(_ value: Swift.Int) -> Self
    @discardableResult
    public func setTimeToRefreshInterval(_ value: Swift.Int) -> Self
    @discardableResult
    public func setTimeToRefreshNoDataInterval(_ value: Swift.Int) -> Self
    public func build() -> FlybitsConcierge.FlybitsConciergeConfiguration
    @objc deinit
  }
  @objc deinit
}
public struct WebCardDetails : Swift.Decodable {
  public var stringUrl: FlybitsSDK.LocalizedObject<Swift.String>? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers final public class WebCardContentData : FlybitsKernelSDK.ContentData {
  final public let html: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let url: FlybitsSDK.LocalizedObject<Swift.String>?
  final public let links: [FlybitsConcierge.WebCardDetails]?
  final public var forwardedLink: Foundation.URL? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension FlybitsConcierge.VideoPlayerState : Swift.Equatable {}
extension FlybitsConcierge.VideoPlayerState : Swift.Hashable {}
extension FlybitsConcierge.ConciergeBooleanOperator : Swift.Equatable {}
extension FlybitsConcierge.ConciergeBooleanOperator : Swift.Hashable {}
extension FlybitsConcierge.ConciergePushTokenStatus : Swift.Equatable {}
extension FlybitsConcierge.ConciergePushTokenStatus : Swift.Hashable {}
extension FlybitsConcierge.ConciergePushTokenStatus : Swift.RawRepresentable {}
extension FlybitsConcierge.OAuthConciergeIDP.ConciergeSupportedOAuthIDP : Swift.Equatable {}
extension FlybitsConcierge.OAuthConciergeIDP.ConciergeSupportedOAuthIDP : Swift.Hashable {}
extension FlybitsConcierge.OAuthConciergeIDP.ConciergeSupportedOAuthIDP : Swift.RawRepresentable {}
extension FlybitsConcierge.MediaContentData.MediaContentDataType : Swift.Equatable {}
extension FlybitsConcierge.MediaContentData.MediaContentDataType : Swift.Hashable {}
extension FlybitsConcierge.MediaContentData.MediaContentDataType : Swift.RawRepresentable {}
extension FlybitsConcierge.Container : Swift.Equatable {}
extension FlybitsConcierge.Container : Swift.Hashable {}
extension FlybitsConcierge.Container : Swift.RawRepresentable {}
extension FlybitsConcierge.OptInChoice : Swift.Equatable {}
extension FlybitsConcierge.OptInChoice : Swift.Hashable {}
extension FlybitsConcierge.OptInChoice : Swift.RawRepresentable {}
extension FlybitsConcierge.ContentStyle : Swift.Equatable {}
extension FlybitsConcierge.ContentStyle : Swift.Hashable {}
extension FlybitsConcierge.ContentStyle : Swift.RawRepresentable {}
extension FlybitsConcierge.ConciergeCustomerStatus : Swift.Equatable {}
extension FlybitsConcierge.ConciergeCustomerStatus : Swift.Hashable {}
extension FlybitsConcierge.ConciergeCustomerStatus : Swift.RawRepresentable {}
extension FlybitsConcierge.ConciergeLoggerLevel : Swift.Equatable {}
extension FlybitsConcierge.ConciergeLoggerLevel : Swift.Hashable {}
extension FlybitsConcierge.ActionType : Swift.Equatable {}
extension FlybitsConcierge.ActionType : Swift.Hashable {}
extension FlybitsConcierge.ActionType : Swift.RawRepresentable {}
extension FlybitsConcierge.ConciergePushNetwork : Swift.Equatable {}
extension FlybitsConcierge.ConciergePushNetwork : Swift.Hashable {}
extension FlybitsConcierge.ConciergePushNetwork : Swift.RawRepresentable {}
