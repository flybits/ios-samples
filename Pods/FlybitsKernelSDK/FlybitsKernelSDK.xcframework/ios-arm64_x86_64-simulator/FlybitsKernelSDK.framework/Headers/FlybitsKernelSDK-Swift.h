#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef FLYBITSKERNELSDK_SWIFT_H
#define FLYBITSKERNELSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import FlybitsSDK;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlybitsKernelSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// Possible boolean operators available to be used together with <code>labels</code> to build <code>LabelsPredicate</code> object.
typedef SWIFT_ENUM(NSInteger, BooleanOperator, open) {
/// Operator to allow <code>AND</code> condition.
  BooleanOperatorAnd = 0,
/// Operator to allow <code>OR</code> condition.
  BooleanOperatorOr = 1,
/// Operator to allow default initialization of this object.
  BooleanOperatorNone = 2,
};


/// The <code>Content</code> class is responsible for defining necessary requests
/// that allows fetching or updating <code>ContentData</code>.
SWIFT_CLASS("_TtC16FlybitsKernelSDK7Content")
@interface Content : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The <code>ContentAnalyticsContext</code> class is used for tracking
/// content <code>viewed</code>, <code>engaged</code>, <code>fulfilled</code>, <code>componentEngaged</code>
/// and <code>componentFulfilled</code> Flybits analytics
SWIFT_CLASS("_TtC16FlybitsKernelSDK23ContentAnalyticsContext")
@interface ContentAnalyticsContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>ContentData</code> class is responsible for defining base model
/// for parsing content data.
SWIFT_CLASS("_TtC16FlybitsKernelSDK11ContentData")
@interface ContentData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LabelsQuery;
@class Pager;

/// The <code>ContentQuery</code> class is responsible for defining the set of compatible
/// query parameters for a <code>Content</code> object.
SWIFT_CLASS("_TtC16FlybitsKernelSDK12ContentQuery")
@interface ContentQuery : NSObject
- (nonnull instancetype)initWithContentTypes:(NSDictionary<NSString *, SWIFT_METATYPE(ContentData)> * _Nullable)contentTypes labelsQuery:(LabelsQuery * _Nullable)labelsQuery pager:(Pager * _Nullable)pager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>Experience</code> class is a container for <code>Content</code> instances.
SWIFT_CLASS("_TtC16FlybitsKernelSDK10Experience")
@interface Experience : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Class <code>ExperienceContentAnalyticsContext</code> is used to track analytics for experiences in Concierge
SWIFT_CLASS("_TtC16FlybitsKernelSDK33ExperienceContentAnalyticsContext")
@interface ExperienceContentAnalyticsContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>Group</code> class is a container for <code>Experience</code>s.
SWIFT_CLASS("_TtC16FlybitsKernelSDK5Group")
@interface Group : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// KernelAPIManager is a wrapper for use with Objective-C based projects.
/// All Swift based projects should use the Requestable enums such as SessionRequest, ZoneRequest or UserRequest.
SWIFT_CLASS("_TtC16FlybitsKernelSDK16KernelAPIManager")
@interface KernelAPIManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class User;
@class NSCoder;

/// The <code>KernelScope</code> class is responsible for managing Content options when initializing
/// the Kernel SDK. This is a primary step to configure and define attributes that are required for
/// content processing.
SWIFT_CLASS("_TtC16FlybitsKernelSDK11KernelScope")
@interface KernelScope : NSObject <FlybitsScope>
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Gets called on adding the scope
- (void)onStartWithCurrentActiveUserIsOptedIn:(BOOL)currentActiveUserIsOptedIn;
/// Gets called on removing the scope
- (void)onStop;
/// Gets called on successfully connecting to the IDP
- (void)onConnectedWithUser:(User * _Nonnull)user;
/// Gets called on disconnecting from the IDP
- (void)onDisconnected;
/// Gets called when a user account opt In of Flybits
- (void)onOptIn;
/// Gets called when a user account opt out of Flybits
- (void)onOptOut;
/// A decoder initializer.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// An encoder.
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LabelsPredicate;

/// Object to allow create complex query parameters to filter contents.
SWIFT_CLASS("_TtC16FlybitsKernelSDK11LabelsQuery")
@interface LabelsQuery : NSObject
/// Constructor to build <code>LabelsQuery</code> object to filter contents API according to the parameters provided.
/// \param predicates Array of predicates to be used to filter contents.
///
/// \param booleanOperator Logical operator that should be used to link all predicates provided.
///
- (nonnull instancetype)initWithPredicates:(NSArray<LabelsPredicate *> * _Nonnull)predicates booleanOperator:(enum BooleanOperator)booleanOperator OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Object to allow to compund multiple LabelsQuery instance and have a more complex query to filter contents.
SWIFT_CLASS("_TtC16FlybitsKernelSDK19LabelsCompoundQuery")
@interface LabelsCompoundQuery : LabelsQuery
/// Array of LabelsQuery instances with the filters conditions
@property (nonatomic, copy) NSArray<LabelsQuery *> * _Nonnull queries;
/// Constructor to build the <code>LabelsCompoundQuery</code> with the provided filter parameters
/// \param queries List of <code>LabelsQuery</code> objects to be compound.
///
/// \param booleanOperator Logical operator to be used to compound multiple queries.
///
- (nonnull instancetype)initWithQueries:(NSArray<LabelsQuery *> * _Nonnull)queries booleanOperator:(enum BooleanOperator)booleanOperator OBJC_DESIGNATED_INITIALIZER;
/// Convert the instance of <code>LabelsCompoundQuery</code> into String to be used as Query Parameter.
///
/// returns:
/// String value to be used as Query Parameter.
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithPredicates:(NSArray<LabelsPredicate *> * _Nonnull)predicates booleanOperator:(enum BooleanOperator)booleanOperator SWIFT_UNAVAILABLE;
@end


/// Object to hold the necessary logic between <code>labels</code> and <code>BooleanOperator</code>.
SWIFT_CLASS("_TtC16FlybitsKernelSDK15LabelsPredicate")
@interface LabelsPredicate : NSObject
/// Array of <code>String</code>  to be used to filter contents.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull labels;
/// Build the <code>LabelsPredicate</code> based on the parameters provided.
/// \param labels Array of <code>String</code>  to be used to filter contents.
///
/// \param booleanOperator Boolean operator to be used together with the <code>labels</code>.
///
///
/// returns:
/// An instance of <code>LabelsPredicate</code> to be used as input to build <code>LabelsExpression</code> object.
- (nonnull instancetype)initWithLabels:(NSArray<NSString *> * _Nonnull)labels booleanOperator:(enum BooleanOperator)booleanOperator OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The <code>LocationQuery</code> class is responsible for defining the set of compatible
/// query parameters for a location based search query.
SWIFT_CLASS("_TtC16FlybitsKernelSDK13LocationQuery")
@interface LocationQuery : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef FLYBITSKERNELSDK_SWIFT_H
#define FLYBITSKERNELSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import FlybitsSDK;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlybitsKernelSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// Possible boolean operators available to be used together with <code>labels</code> to build <code>LabelsPredicate</code> object.
typedef SWIFT_ENUM(NSInteger, BooleanOperator, open) {
/// Operator to allow <code>AND</code> condition.
  BooleanOperatorAnd = 0,
/// Operator to allow <code>OR</code> condition.
  BooleanOperatorOr = 1,
/// Operator to allow default initialization of this object.
  BooleanOperatorNone = 2,
};


/// The <code>Content</code> class is responsible for defining necessary requests
/// that allows fetching or updating <code>ContentData</code>.
SWIFT_CLASS("_TtC16FlybitsKernelSDK7Content")
@interface Content : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The <code>ContentAnalyticsContext</code> class is used for tracking
/// content <code>viewed</code>, <code>engaged</code>, <code>fulfilled</code>, <code>componentEngaged</code>
/// and <code>componentFulfilled</code> Flybits analytics
SWIFT_CLASS("_TtC16FlybitsKernelSDK23ContentAnalyticsContext")
@interface ContentAnalyticsContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>ContentData</code> class is responsible for defining base model
/// for parsing content data.
SWIFT_CLASS("_TtC16FlybitsKernelSDK11ContentData")
@interface ContentData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LabelsQuery;
@class Pager;

/// The <code>ContentQuery</code> class is responsible for defining the set of compatible
/// query parameters for a <code>Content</code> object.
SWIFT_CLASS("_TtC16FlybitsKernelSDK12ContentQuery")
@interface ContentQuery : NSObject
- (nonnull instancetype)initWithContentTypes:(NSDictionary<NSString *, SWIFT_METATYPE(ContentData)> * _Nullable)contentTypes labelsQuery:(LabelsQuery * _Nullable)labelsQuery pager:(Pager * _Nullable)pager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>Experience</code> class is a container for <code>Content</code> instances.
SWIFT_CLASS("_TtC16FlybitsKernelSDK10Experience")
@interface Experience : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Class <code>ExperienceContentAnalyticsContext</code> is used to track analytics for experiences in Concierge
SWIFT_CLASS("_TtC16FlybitsKernelSDK33ExperienceContentAnalyticsContext")
@interface ExperienceContentAnalyticsContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>Group</code> class is a container for <code>Experience</code>s.
SWIFT_CLASS("_TtC16FlybitsKernelSDK5Group")
@interface Group : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// KernelAPIManager is a wrapper for use with Objective-C based projects.
/// All Swift based projects should use the Requestable enums such as SessionRequest, ZoneRequest or UserRequest.
SWIFT_CLASS("_TtC16FlybitsKernelSDK16KernelAPIManager")
@interface KernelAPIManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class User;
@class NSCoder;

/// The <code>KernelScope</code> class is responsible for managing Content options when initializing
/// the Kernel SDK. This is a primary step to configure and define attributes that are required for
/// content processing.
SWIFT_CLASS("_TtC16FlybitsKernelSDK11KernelScope")
@interface KernelScope : NSObject <FlybitsScope>
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Gets called on adding the scope
- (void)onStartWithCurrentActiveUserIsOptedIn:(BOOL)currentActiveUserIsOptedIn;
/// Gets called on removing the scope
- (void)onStop;
/// Gets called on successfully connecting to the IDP
- (void)onConnectedWithUser:(User * _Nonnull)user;
/// Gets called on disconnecting from the IDP
- (void)onDisconnected;
/// Gets called when a user account opt In of Flybits
- (void)onOptIn;
/// Gets called when a user account opt out of Flybits
- (void)onOptOut;
/// A decoder initializer.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// An encoder.
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LabelsPredicate;

/// Object to allow create complex query parameters to filter contents.
SWIFT_CLASS("_TtC16FlybitsKernelSDK11LabelsQuery")
@interface LabelsQuery : NSObject
/// Constructor to build <code>LabelsQuery</code> object to filter contents API according to the parameters provided.
/// \param predicates Array of predicates to be used to filter contents.
///
/// \param booleanOperator Logical operator that should be used to link all predicates provided.
///
- (nonnull instancetype)initWithPredicates:(NSArray<LabelsPredicate *> * _Nonnull)predicates booleanOperator:(enum BooleanOperator)booleanOperator OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Object to allow to compund multiple LabelsQuery instance and have a more complex query to filter contents.
SWIFT_CLASS("_TtC16FlybitsKernelSDK19LabelsCompoundQuery")
@interface LabelsCompoundQuery : LabelsQuery
/// Array of LabelsQuery instances with the filters conditions
@property (nonatomic, copy) NSArray<LabelsQuery *> * _Nonnull queries;
/// Constructor to build the <code>LabelsCompoundQuery</code> with the provided filter parameters
/// \param queries List of <code>LabelsQuery</code> objects to be compound.
///
/// \param booleanOperator Logical operator to be used to compound multiple queries.
///
- (nonnull instancetype)initWithQueries:(NSArray<LabelsQuery *> * _Nonnull)queries booleanOperator:(enum BooleanOperator)booleanOperator OBJC_DESIGNATED_INITIALIZER;
/// Convert the instance of <code>LabelsCompoundQuery</code> into String to be used as Query Parameter.
///
/// returns:
/// String value to be used as Query Parameter.
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithPredicates:(NSArray<LabelsPredicate *> * _Nonnull)predicates booleanOperator:(enum BooleanOperator)booleanOperator SWIFT_UNAVAILABLE;
@end


/// Object to hold the necessary logic between <code>labels</code> and <code>BooleanOperator</code>.
SWIFT_CLASS("_TtC16FlybitsKernelSDK15LabelsPredicate")
@interface LabelsPredicate : NSObject
/// Array of <code>String</code>  to be used to filter contents.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull labels;
/// Build the <code>LabelsPredicate</code> based on the parameters provided.
/// \param labels Array of <code>String</code>  to be used to filter contents.
///
/// \param booleanOperator Boolean operator to be used together with the <code>labels</code>.
///
///
/// returns:
/// An instance of <code>LabelsPredicate</code> to be used as input to build <code>LabelsExpression</code> object.
- (nonnull instancetype)initWithLabels:(NSArray<NSString *> * _Nonnull)labels booleanOperator:(enum BooleanOperator)booleanOperator OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The <code>LocationQuery</code> class is responsible for defining the set of compatible
/// query parameters for a location based search query.
SWIFT_CLASS("_TtC16FlybitsKernelSDK13LocationQuery")
@interface LocationQuery : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
